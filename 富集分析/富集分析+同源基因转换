# enrichR 富集分析
- https://rdrr.io/cran/enrichR/f/vignettes/enrichR.Rmd
library(enrichR)
dbs <- c("GO_Molecular_Function_2018", "GO_Cellular_Component_2018", "GO_Biological_Process_2018",)
enriched <- enrichr(genemerge, dbs)
result1 <- enriched[["GO_Biological_Process_2018"]]


# 富集分析
library(openxlsx)#读取.xlsx文件
library(ggplot2)#柱状图和点状图
library(stringr)#基因ID转换
library(enrichplot)#GO,KEGG,GSEA
library(clusterProfiler)#GO,KEGG,GSEA
library(GOplot)#弦图，弦表图，系统聚类图
library(DOSE)
library(ggnewscale)
library(topGO)#绘制通路网络图
library(circlize)#绘制富集分析圈图
library(ComplexHeatmap)#绘制图例


GO_database <- 'org.Mm.eg.db' #GO分析指定物种，物种缩写索引表详见http://bioconductor.org/packages/release/BiocViews.html#___OrgDb
KEGG_database <- 'mmu' #KEGG分析指定物种，物种缩写索引表详见http://www.genome.jp/kegg/catalog/org_list.html

#gene ID转换
gene <- bitr(DJ1.microshamvsmcao.markers$gene,fromType = 'SYMBOL',toType = 'ENTREZID',OrgDb = GO_database)

GO<-enrichGO( gene$ENTREZID,#GO富集分析
              OrgDb = GO_database,
              keyType = "ENTREZID",#设定读取的gene ID类型
              ont = "ALL",#(ont为ALL因此包括 Biological Process,Cellular Component,Mollecular Function三部分）
              pvalueCutoff = 0.05,#设定p值阈值
              qvalueCutoff = 0.05,#设定q值阈值
              readable = T)


KEGG<-enrichKEGG(gene$ENTREZID,#KEGG富集分析
                 organism = KEGG_database,
                 pvalueCutoff = 0.05,
                 qvalueCutoff = 0.05)

barplot(GO, split="ONTOLOGY")+facet_grid(ONTOLOGY~., scale="free")#柱状图
barplot(KEGG,showCategory = 40,title = 'KEGG Pathway')
dotplot(GO, split="ONTOLOGY")+facet_grid(ONTOLOGY~., scale="free")#点状图
dotplot(KEGG)


# GSEA 方法1
park7=DJ1.microshamvsmcao.markers[c(6,2,1,5)]
info=park7
names(info) <- c('SYMBOL','Log2FoldChange','pvalue','padj')
info_merge <- merge(info,gene,by='SYMBOL')#合并转换后的基因ID和Log2FoldChange
GSEA_input <- info_merge$Log2FoldChange
names(GSEA_input) = toupper(info_merge$SYMBOL)
GSEA_input = sort(GSEA_input, decreasing = TRUE)

GSEA_KEGG <- gseKEGG(GSEA_input, organism = KEGG_database,
                     pvalueCutoff = 0.05)
GSEA_GO=gseGO(GSEA_input, OrgDb = org.Mm.eg.db,ont = "BP",
                pvalueCutoff = 0.05)

ridgeplot(GSEA_GO)
dotplot(GSEA_GO,color="pvalue")
wcl=GSEA_GO@result

# GSEA 方法2
library(homologene)
# 读gmt文件 
# http://www.gsea-msigdb.org/gsea/downloads.jsp
GO.BP<-read.gmt("c5.go.bp.v7.5.1.entrez.gmt") 
# 转换同源基因
genelist=DJ1.microshamvsmcao.markers$gene
genehmlist=homologene(genelist, inTax = 10090, outTax = 9606)
# 查询物种代码 homologene::taxData
test1=merge(park7,genehmlist,by.x="gene",by.y="10090")
GSEA_input <- test1$avg_log2FC
names(test1)=c("a","b","c","d","e","f","g")
names(GSEA_input) = as.character(test1$g)
GSEA_input = sort(GSEA_input, decreasing = TRUE)
# GSEA-GO分析
GSEA_GO1 <- GSEA(GSEA_input, TERM2GENE= GO.BP)
dotplot(GSEA_GO1,color="pvalue")  #按p值出点图 

